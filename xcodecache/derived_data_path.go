package cache

import (
	"crypto/md5"
	"encoding/binary"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/bitrise-io/go-utils/pathutil"
	"golang.org/x/text/unicode/norm"
)

// xcodeDerivedDataHash returns the unique ID generated by Xcode for a xcodeproj or xcworkspace path, used in DerivedData build directory name.
func xcodeDerivedDataHash(path string) (string, error) {
	// Suppress insecure crypto primitive warning: #nosec G401
	hasher := md5.New()
	if _, err := hasher.Write([]byte(norm.NFD.String(path))); err != nil {
		return "", err
	}
	result := make([]byte, 28)

	// take the first 8 bytes of the hash with swapped byte order
	startValue := binary.BigEndian.Uint64(hasher.Sum(nil))
	for i := 13; i >= 0; i-- {
		// mod 26 (restricting to alphabetic) and add to 'a'
		result[i] = byte(startValue%26) + 'a'
		startValue /= 26
	}

	// Same operation on the last 8 bytes
	startValue = binary.BigEndian.Uint64(hasher.Sum(nil)[8:])
	for i := 27; i > 13; i-- {
		result[i] = byte(startValue%26) + 'a'
		startValue /= 26
	}

	return string(result), nil
}

// xcodeProjectDerivedDataPath return a per project or worksapce Xcode DerivedData path.
func xcodeProjectDerivedDataPath(projectPath string) (string, error) {
	projectName := strings.TrimSuffix(filepath.Base(projectPath), filepath.Ext(projectPath))
	projectName = strings.Replace(projectName, " ", "_", -1) // changing spaces to _
	derivedDataDir := filepath.Join(pathutil.UserHomeDir(), "Library", "Developer", "Xcode", "DerivedData")

	projectHash, err := xcodeDerivedDataHash(projectPath)
	if err != nil {
		return "", fmt.Errorf("failed to get per-project DerivedData path hash, %s", err)
	}

	return filepath.Join(derivedDataDir, fmt.Sprintf("%s-%s", projectName, projectHash)), nil
}
