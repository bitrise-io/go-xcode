// Code generated by mockery 2.9.4. DO NOT EDIT.

package autocodesign

import (
	big "math/big"

	appstoreconnect "github.com/bitrise-io/go-xcode/v2/autocodesign/devportalclient/appstoreconnect"

	devportalservice "github.com/bitrise-io/go-xcode/devportalservice"

	mock "github.com/stretchr/testify/mock"
)

// MockDevPortalClient is an autogenerated mock type for the DevPortalClient type
type MockDevPortalClient struct {
	mock.Mock
}

// CheckBundleIDEntitlements provides a mock function with given fields: bundleID, appEntitlements
func (_m *MockDevPortalClient) CheckBundleIDEntitlements(bundleID appstoreconnect.BundleID, appEntitlements Entitlements) error {
	ret := _m.Called(bundleID, appEntitlements)

	var r0 error
	if rf, ok := ret.Get(0).(func(appstoreconnect.BundleID, Entitlements) error); ok {
		r0 = rf(bundleID, appEntitlements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBundleID provides a mock function with given fields: bundleIDIdentifier, appIDName
func (_m *MockDevPortalClient) CreateBundleID(bundleIDIdentifier string, appIDName string) (*appstoreconnect.BundleID, error) {
	ret := _m.Called(bundleIDIdentifier, appIDName)

	var r0 *appstoreconnect.BundleID
	if rf, ok := ret.Get(0).(func(string, string) *appstoreconnect.BundleID); ok {
		r0 = rf(bundleIDIdentifier, appIDName)
	} else {
		if ret.Get(0) != nil {
			r0, ok = ret.Get(0).(*appstoreconnect.BundleID)
			if !ok {
			}
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bundleIDIdentifier, appIDName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: name, profileType, bundleID, certificateIDs, deviceIDs
func (_m *MockDevPortalClient) CreateProfile(name string, profileType appstoreconnect.ProfileType, bundleID appstoreconnect.BundleID, certificateIDs []string, deviceIDs []string) (Profile, error) {
	ret := _m.Called(name, profileType, bundleID, certificateIDs, deviceIDs)

	var r0 Profile
	if rf, ok := ret.Get(0).(func(string, appstoreconnect.ProfileType, appstoreconnect.BundleID, []string, []string) Profile); ok {
		r0 = rf(name, profileType, bundleID, certificateIDs, deviceIDs)
	} else {
		if ret.Get(0) != nil {
			r0, ok = ret.Get(0).(Profile)
			if !ok {
			}
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, appstoreconnect.ProfileType, appstoreconnect.BundleID, []string, []string) error); ok {
		r1 = rf(name, profileType, bundleID, certificateIDs, deviceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: id
func (_m *MockDevPortalClient) DeleteProfile(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBundleID provides a mock function with given fields: bundleIDIdentifier
func (_m *MockDevPortalClient) FindBundleID(bundleIDIdentifier string) (*appstoreconnect.BundleID, error) {
	ret := _m.Called(bundleIDIdentifier)

	var r0 *appstoreconnect.BundleID
	if rf, ok := ret.Get(0).(func(string) *appstoreconnect.BundleID); ok {
		r0 = rf(bundleIDIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0, ok = ret.Get(0).(*appstoreconnect.BundleID)
			if !ok {
			}
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bundleIDIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProfile provides a mock function with given fields: name, profileType
func (_m *MockDevPortalClient) FindProfile(name string, profileType appstoreconnect.ProfileType) (Profile, error) {
	ret := _m.Called(name, profileType)

	var r0 Profile
	if rf, ok := ret.Get(0).(func(string, appstoreconnect.ProfileType) Profile); ok {
		r0 = rf(name, profileType)
	} else {
		if ret.Get(0) != nil {
			r0, ok = ret.Get(0).(Profile)
			if !ok {
			}
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, appstoreconnect.ProfileType) error); ok {
		r1 = rf(name, profileType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: UDID, platform
func (_m *MockDevPortalClient) ListDevices(UDID string, platform appstoreconnect.DevicePlatform) ([]appstoreconnect.Device, error) {
	ret := _m.Called(UDID, platform)

	var r0 []appstoreconnect.Device
	if rf, ok := ret.Get(0).(func(string, appstoreconnect.DevicePlatform) []appstoreconnect.Device); ok {
		r0 = rf(UDID, platform)
	} else {
		if ret.Get(0) != nil {
			r0, ok = ret.Get(0).([]appstoreconnect.Device)
			if !ok {
			}
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, appstoreconnect.DevicePlatform) error); ok {
		r1 = rf(UDID, platform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryAllIOSCertificates provides a mock function with given fields:
func (_m *MockDevPortalClient) QueryAllIOSCertificates() (map[appstoreconnect.CertificateType][]Certificate, error) {
	ret := _m.Called()

	var r0 map[appstoreconnect.CertificateType][]Certificate
	if rf, ok := ret.Get(0).(func() map[appstoreconnect.CertificateType][]Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0, ok = ret.Get(0).(map[appstoreconnect.CertificateType][]Certificate)
			if !ok {
			}
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCertificateBySerial provides a mock function with given fields: serial
func (_m *MockDevPortalClient) QueryCertificateBySerial(serial big.Int) (Certificate, error) {
	ret := _m.Called(serial)

	var r0 Certificate
	if rf, ok := ret.Get(0).(func(big.Int) Certificate); ok {
		r0 = rf(serial)
	} else {
		r0, ok = ret.Get(0).(Certificate)
		if !ok {
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(big.Int) error); ok {
		r1 = rf(serial)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDevice provides a mock function with given fields: testDevice
func (_m *MockDevPortalClient) RegisterDevice(testDevice devportalservice.TestDevice) (*appstoreconnect.Device, error) {
	ret := _m.Called(testDevice)

	var r0 *appstoreconnect.Device
	if rf, ok := ret.Get(0).(func(devportalservice.TestDevice) *appstoreconnect.Device); ok {
		r0 = rf(testDevice)
	} else {
		if ret.Get(0) != nil {
			r0, ok = ret.Get(0).(*appstoreconnect.Device)
			if !ok {
			}
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(devportalservice.TestDevice) error); ok {
		r1 = rf(testDevice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncBundleID provides a mock function with given fields: bundleID, appEntitlements
func (_m *MockDevPortalClient) SyncBundleID(bundleID appstoreconnect.BundleID, appEntitlements Entitlements) error {
	ret := _m.Called(bundleID, appEntitlements)

	var r0 error
	if rf, ok := ret.Get(0).(func(appstoreconnect.BundleID, Entitlements) error); ok {
		r0 = rf(bundleID, appEntitlements)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
