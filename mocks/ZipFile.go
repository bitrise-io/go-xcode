// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ZipFile is an autogenerated mock type for the File type
type ZipFile struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *ZipFile) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *ZipFile) Open() (io.ReadCloser, error) {
	ret := _m.Called()

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.ReadCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewZipFile interface {
	mock.TestingT
	Cleanup(func())
}

// NewZipFile creates a new instance of ZipFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewZipFile(t mockConstructorTestingTNewZipFile) *ZipFile {
	mock := &ZipFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
