// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	zip "github.com/bitrise-io/go-xcode/v2/internals/zip"
	mock "github.com/stretchr/testify/mock"
)

// ZipReadCloser is an autogenerated mock type for the ReadCloser type
type ZipReadCloser struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ZipReadCloser) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Files provides a mock function with given fields:
func (_m *ZipReadCloser) Files() []zip.File {
	ret := _m.Called()

	var r0 []zip.File
	if rf, ok := ret.Get(0).(func() []zip.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zip.File)
		}
	}

	return r0
}

type mockConstructorTestingTNewZipReadCloser interface {
	mock.TestingT
	Cleanup(func())
}

// NewZipReadCloser creates a new instance of ZipReadCloser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewZipReadCloser(t mockConstructorTestingTNewZipReadCloser) *ZipReadCloser {
	mock := &ZipReadCloser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
